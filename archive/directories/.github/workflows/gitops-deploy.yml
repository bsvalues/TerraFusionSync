name: GitOps Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'kubernetes/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, stage, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - stage
          - prod
      dryRun:
        description: 'Dry run (true/false)'
        required: false
        default: 'false'
        type: boolean

jobs:
  validate-kubernetes:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        run: |
          curl -LO "https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          
          curl -s https://raw.githubusercontent.com/kubeval/kubeval/master/install.sh | bash
          sudo mv kubeval /usr/local/bin/

      - name: Validate Kustomize
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          echo "Validating Kustomize for $ENV environment"
          kustomize build kubernetes/overlays/$ENV > /tmp/manifests.yaml
          
          # Validate with kubeval
          kubeval --kubernetes-version 1.24.0 /tmp/manifests.yaml

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: validate-kubernetes
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Kubernetes tools
        run: |
          curl -LO "https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Configure Kubernetes credentials
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          context: ${{ secrets.KUBE_CONTEXT }}

      - name: Deploy to Kubernetes
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          DRY_RUN="${{ github.event.inputs.dryRun || 'false' }}"
          
          echo "Deploying to $ENV environment (dry run: $DRY_RUN)"
          
          # Run the GitOps sync script
          ./scripts/gitops-sync.sh --environment $ENV --context ${{ secrets.KUBE_CONTEXT }} $([ "$DRY_RUN" = "true" ] && echo "--dry-run")

      - name: Notify deployment status
        if: ${{ always() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "GitOps Deployment to ${{ github.event.inputs.environment || 'dev' }}"
          SLACK_MESSAGE: "Deployment ${{ job.status == 'success' && 'succeeded' || 'failed' }}! Environment: ${{ github.event.inputs.environment || 'dev' }}"
          SLACK_FOOTER: "TerraFusion SyncService Platform"
          
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ github.event.inputs.dryRun != 'true' }}
    steps:
      - name: Configure Kubernetes credentials
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
          context: ${{ secrets.KUBE_CONTEXT }}
          
      - name: Check deployment status
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          NAMESPACE="terrafusion-$ENV"
          
          echo "Checking deployment status in namespace $NAMESPACE"
          
          # Check if deployments are ready
          kubectl get deployments -n $NAMESPACE
          
          # Check if pods are running
          kubectl get pods -n $NAMESPACE
          
          # Check service endpoints
          kubectl get services -n $NAMESPACE
          
          # Check health endpoints
          if [[ "$ENV" == "prod" ]]; then
            HOST="terrafusion.example.com"
          elif [[ "$ENV" == "stage" ]]; then
            HOST="stage.terrafusion.example.com"
          else
            HOST="dev.terrafusion.example.com"
          fi
          
          echo "Checking health endpoint for $HOST"
          POD_NAME=$(kubectl get pods -n $NAMESPACE -l app=api-gateway -o jsonpath="{.items[0].metadata.name}")
          
          # Check API Gateway health using kubectl exec for internal health check
          kubectl exec -n $NAMESPACE $POD_NAME -- curl -s http://localhost:5000/api/health
          
          echo "Deployment verification completed"