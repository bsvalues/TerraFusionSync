name: TerraFusion CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov flake8 mypy black isort

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Check formatting with black
        run: |
          black --check .
          
      - name: Sort imports with isort
        run: |
          isort --check-only --profile black .
          
      - name: Type check with mypy
        run: |
          mypy .
          
      - name: Test with pytest
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pytest --cov=./ --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
  
  build:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata for API Gateway
        id: meta-api
        uses: docker/metadata-action@v4
        with:
          images: terrafusion/api-gateway
          
      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.api-gateway
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          
      - name: Extract metadata for SyncService
        id: meta-sync
        uses: docker/metadata-action@v4
        with:
          images: terrafusion/sync-service
          
      - name: Build and push SyncService
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.sync-service
          push: true
          tags: ${{ steps.meta-sync.outputs.tags }}
          labels: ${{ steps.meta-sync.outputs.labels }}
  
  deploy-dev:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
      - name: Update deployment image
        run: |
          kubectl set image deployment/api-gateway api-gateway=terrafusion/api-gateway:${{ github.sha }} -n terrafusion-dev
          kubectl set image deployment/sync-service sync-service=terrafusion/sync-service:${{ github.sha }} -n terrafusion-dev
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/api-gateway -n terrafusion-dev
          kubectl rollout status deployment/sync-service -n terrafusion-dev
  
  deploy-prod:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
      - name: Update deployment image
        run: |
          kubectl set image deployment/api-gateway api-gateway=terrafusion/api-gateway:${{ github.sha }} -n terrafusion-prod
          kubectl set image deployment/sync-service sync-service=terrafusion/sync-service:${{ github.sha }} -n terrafusion-prod
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/api-gateway -n terrafusion-prod
          kubectl rollout status deployment/sync-service -n terrafusion-prod