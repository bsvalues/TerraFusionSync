use std::time::Duration;
use sqlx::{postgres::{PgPool, PgPoolOptions}, Pool, Postgres};
use crate::errors::{Error, Result};

pub mod migrations;
pub mod query;

/// Database pool alias for PostgreSQL
pub type DbPool = Pool<Postgres>;

/// Configuration options for database connection pool
#[derive(Debug, Clone)]
pub struct DbConfig {
    /// Database connection URL (postgres://user:pass@host:port/dbname)
    pub url: String,
    
    /// Maximum number of connections in the pool
    pub max_connections: u32,
    
    /// Connection timeout in seconds
    pub connect_timeout: u64,
    
    /// Maximum lifetime of a connection in the pool in seconds
    pub max_lifetime: u64,
    
    /// Idle timeout for connections in seconds
    pub idle_timeout: u64,
}

impl Default for DbConfig {
    fn default() -> Self {
        Self {
            url: "postgres://postgres:postgres@localhost:5432/terrafusion".to_string(),
            max_connections: 5,
            connect_timeout: 10,
            max_lifetime: 1800, // 30 minutes
            idle_timeout: 600,  // 10 minutes
        }
    }
}

/// Create a new database connection pool
pub async fn create_pool(config: &DbConfig) -> Result<DbPool> {
    let pool = PgPoolOptions::new()
        .max_connections(config.max_connections)
        .connect_timeout(Duration::from_secs(config.connect_timeout))
        .max_lifetime(Duration::from_secs(config.max_lifetime))
        .idle_timeout(Duration::from_secs(config.idle_timeout))
        .connect(&config.url)
        .await
        .map_err(|e| Error::Database(crate::errors::DatabaseError::Connection(e.to_string())))?;
    
    // Verify connection by pinging the database
    sqlx::query("SELECT 1")
        .execute(&pool)
        .await
        .map_err(|e| Error::Database(crate::errors::DatabaseError::Connection(e.to_string())))?;
    
    Ok(pool)
}

/// Create a database connection pool from environment variables
pub async fn create_pool_from_env() -> Result<DbPool> {
    let database_url = std::env::var("DATABASE_URL")
        .map_err(|_| Error::Config("DATABASE_URL environment variable not set".to_string()))?;
    
    let max_connections = std::env::var("DATABASE_MAX_CONNECTIONS")
        .unwrap_or_else(|_| "5".to_string())
        .parse::<u32>()
        .map_err(|_| Error::Config("Invalid DATABASE_MAX_CONNECTIONS value".to_string()))?;
    
    let connect_timeout = std::env::var("DATABASE_CONNECT_TIMEOUT")
        .unwrap_or_else(|_| "10".to_string())
        .parse::<u64>()
        .map_err(|_| Error::Config("Invalid DATABASE_CONNECT_TIMEOUT value".to_string()))?;
    
    let max_lifetime = std::env::var("DATABASE_MAX_LIFETIME")
        .unwrap_or_else(|_| "1800".to_string())
        .parse::<u64>()
        .map_err(|_| Error::Config("Invalid DATABASE_MAX_LIFETIME value".to_string()))?;
    
    let idle_timeout = std::env::var("DATABASE_IDLE_TIMEOUT")
        .unwrap_or_else(|_| "600".to_string())
        .parse::<u64>()
        .map_err(|_| Error::Config("Invalid DATABASE_IDLE_TIMEOUT value".to_string()))?;
    
    let config = DbConfig {
        url: database_url,
        max_connections,
        connect_timeout,
        max_lifetime,
        idle_timeout,
    };
    
    create_pool(&config).await
}

/// Helper function to check if a database table exists
pub async fn table_exists(pool: &DbPool, table_name: &str, schema: &str) -> Result<bool> {
    let result = sqlx::query!(
        r#"
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = $1
            AND table_name = $2
        ) AS "exists!"
        "#,
        schema,
        table_name
    )
    .fetch_one(pool)
    .await
    .map_err(|e| crate::errors::map_sqlx_error(e))?;
    
    Ok(result.exists)
}

/// Helper function to execute a transaction with automatic rollback on error
pub async fn transaction<F, T>(pool: &DbPool, f: F) -> Result<T>
where
    F: for<'a> FnOnce(&'a mut sqlx::Transaction<'_, Postgres>) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<T>> + Send + 'a>>,
    T: Send + 'static,
{
    let mut tx = pool
        .begin()
        .await
        .map_err(|e| Error::Database(crate::errors::DatabaseError::Transaction(e.to_string())))?;
    
    let result = f(&mut tx).await;
    
    match result {
        Ok(value) => {
            tx.commit()
                .await
                .map_err(|e| Error::Database(crate::errors::DatabaseError::Transaction(e.to_string())))?;
            Ok(value)
        }
        Err(e) => {
            tx.rollback()
                .await
                .map_err(|e| Error::Database(crate::errors::DatabaseError::Transaction(e.to_string())))?;
            Err(e)
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[tokio::test]
    async fn test_create_pool_invalid_url() {
        let config = DbConfig {
            url: "postgres://invalid:invalid@localhost:5432/invalid".to_string(),
            ..Default::default()
        };
        
        let result = create_pool(&config).await;
        assert!(result.is_err());
    }
}