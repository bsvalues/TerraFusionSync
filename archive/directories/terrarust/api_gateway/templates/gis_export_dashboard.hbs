{{#> layout}}
  {{#*inline "content"}}
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
      <h1 class="h2">GIS Export Dashboard</h1>
      <div class="btn-toolbar mb-2 mb-md-0">
        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#newExportModal">
          <span data-feather="plus"></span>
          New Export
        </button>
      </div>
    </div>

    <div class="row mb-4">
      <div class="col-md-12">
        <div class="card shadow">
          <div class="card-header">
            <h5 class="card-title mb-0">Recent Exports</h5>
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table class="table table-bordered table-hover">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>County</th>
                    <th>Format</th>
                    <th>Status</th>
                    <th>Created</th>
                    <th>Created By</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {{#each exports}}
                  <tr>
                    <td>{{this.id}}</td>
                    <td>{{this.county_id}}</td>
                    <td>{{this.export_format}}</td>
                    <td>
                      {{#if (eq this.status "COMPLETED")}}
                      <span class="badge bg-success">Completed</span>
                      {{else if (eq this.status "RUNNING")}}
                      <span class="badge bg-primary">Running</span>
                      {{else if (eq this.status "FAILED")}}
                      <span class="badge bg-danger">Failed</span>
                      {{else if (eq this.status "CANCELED")}}
                      <span class="badge bg-warning">Canceled</span>
                      {{else}}
                      <span class="badge bg-secondary">{{this.status}}</span>
                      {{/if}}
                    </td>
                    <td>{{this.created_at}}</td>
                    <td>{{this.created_by}}</td>
                    <td>
                      <div class="btn-group">
                        <button type="button" class="btn btn-sm btn-info" onclick="viewExport('{{this.id}}')">
                          <span data-feather="eye"></span>
                        </button>
                        {{#if (eq this.status "COMPLETED")}}
                        <a href="/api/v1/gis-exports/{{this.id}}/download" class="btn btn-sm btn-success">
                          <span data-feather="download"></span>
                        </a>
                        {{/if}}
                        {{#if (eq this.status "RUNNING")}}
                        <button type="button" class="btn btn-sm btn-danger" onclick="cancelExport('{{this.id}}')">
                          <span data-feather="square"></span>
                        </button>
                        {{/if}}
                      </div>
                    </td>
                  </tr>
                  {{/each}}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- New Export Modal -->
    <div class="modal fade" id="newExportModal" tabindex="-1" aria-labelledby="newExportModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="newExportModalLabel">Create New GIS Export</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="newExportForm">
              <div class="mb-3">
                <label for="exportCounty" class="form-label">County</label>
                <select class="form-select" id="exportCounty" name="county_id" required>
                  {{#each available_counties}}
                  <option value="{{this.id}}">{{this.name}}</option>
                  {{/each}}
                </select>
              </div>
              <div class="mb-3">
                <label for="exportFormat" class="form-label">Export Format</label>
                <select class="form-select" id="exportFormat" name="export_format" required>
                  {{#each available_formats}}
                  <option value="{{this}}">{{this}}</option>
                  {{/each}}
                </select>
              </div>
              <div class="mb-3">
                <label for="exportLayers" class="form-label">Layers to Export</label>
                <div id="layersCheckboxes" class="border p-3 rounded">
                  <div class="text-center text-muted">
                    <small>Select a county to see available layers</small>
                  </div>
                </div>
              </div>
              <div class="mb-3">
                <label for="areaOfInterest" class="form-label">Area of Interest (GeoJSON)</label>
                <textarea class="form-control" id="areaOfInterest" name="area_of_interest" rows="5" placeholder="Optional: Provide a GeoJSON geometry to limit the export area"></textarea>
              </div>
              <div class="mb-3">
                <label for="exportParameters" class="form-label">Additional Parameters (JSON)</label>
                <textarea class="form-control" id="exportParameters" name="parameters" rows="3" placeholder="Optional: Provide additional parameters as JSON">{}</textarea>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="createExport()">Create Export</button>
          </div>
        </div>
      </div>
    </div>

    <!-- View Export Modal -->
    <div class="modal fade" id="viewExportModal" tabindex="-1" aria-labelledby="viewExportModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="viewExportModalLabel">Export Details</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body" id="viewExportDetails">
            <div class="text-center">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <a href="#" id="exportDownloadLink" class="btn btn-success d-none">
              <span data-feather="download"></span> Download
            </a>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Helper functions for the GIS Export dashboard
      function getAvailableLayers(countyId) {
        fetch('/api/v1/counties/' + countyId + '/layers')
          .then(response => response.json())
          .then(layers => {
            const layersContainer = document.getElementById('layersCheckboxes');
            layersContainer.innerHTML = '';
            
            if (layers.length === 0) {
              layersContainer.innerHTML = '<div class="text-center text-muted"><small>No layers available for this county</small></div>';
              return;
            }
            
            layers.forEach(layer => {
              const checkboxDiv = document.createElement('div');
              checkboxDiv.className = 'form-check';
              
              const checkbox = document.createElement('input');
              checkbox.className = 'form-check-input';
              checkbox.type = 'checkbox';
              checkbox.id = 'layer_' + layer.id;
              checkbox.name = 'layers';
              checkbox.value = layer.id;
              
              const label = document.createElement('label');
              label.className = 'form-check-label';
              label.htmlFor = 'layer_' + layer.id;
              label.textContent = layer.name + ' - ' + layer.description;
              
              checkboxDiv.appendChild(checkbox);
              checkboxDiv.appendChild(label);
              layersContainer.appendChild(checkboxDiv);
            });
          })
          .catch(error => {
            console.error('Error fetching layers:', error);
            const layersContainer = document.getElementById('layersCheckboxes');
            layersContainer.innerHTML = '<div class="text-center text-danger"><small>Error loading layers: ' + error.message + '</small></div>';
          });
      }

      function createExport() {
        const form = document.getElementById('newExportForm');
        const formData = new FormData(form);
        const data = {
          county_id: formData.get('county_id'),
          export_format: formData.get('export_format'),
          layers: [],
          parameters: {}
        };
        
        // Get selected layers
        const layerCheckboxes = form.querySelectorAll('input[name="layers"]:checked');
        layerCheckboxes.forEach(checkbox => {
          data.layers.push(checkbox.value);
        });
        
        // Parse area of interest if provided
        const areaOfInterest = formData.get('area_of_interest');
        if (areaOfInterest && areaOfInterest.trim() !== '') {
          try {
            data.area_of_interest = JSON.parse(areaOfInterest);
          } catch (e) {
            alert('Invalid GeoJSON in Area of Interest');
            return;
          }
        }
        
        // Parse parameters if provided
        const parameters = formData.get('parameters');
        if (parameters && parameters.trim() !== '') {
          try {
            data.parameters = JSON.parse(parameters);
          } catch (e) {
            alert('Invalid JSON in Parameters');
            return;
          }
        }
        
        // Validate layers
        if (data.layers.length === 0) {
          alert('Please select at least one layer to export');
          return;
        }
        
        fetch('/api/v1/gis-exports', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        })
        .then(response => {
          if (response.ok) {
            alert('Export created successfully');
            location.reload();
          } else {
            response.json().then(data => {
              alert('Error: ' + data.error);
            });
          }
        })
        .catch(error => {
          alert('Error: ' + error);
        });
      }

      function viewExport(exportId) {
        const modal = new bootstrap.Modal(document.getElementById('viewExportModal'));
        modal.show();
        
        const detailsContainer = document.getElementById('viewExportDetails');
        const downloadLink = document.getElementById('exportDownloadLink');
        
        // Reset download link
        downloadLink.href = '#';
        downloadLink.classList.add('d-none');
        
        // Show loading spinner
        detailsContainer.innerHTML = `
          <div class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
        `;
        
        fetch('/api/v1/gis-exports/' + exportId)
          .then(response => response.json())
          .then(data => {
            if (data.export) {
              const export_data = data.export;
              detailsContainer.innerHTML = `
                <div class="row">
                  <div class="col-md-6">
                    <dl class="row">
                      <dt class="col-sm-4">County:</dt>
                      <dd class="col-sm-8">${export_data.county_id}</dd>
                      
                      <dt class="col-sm-4">Format:</dt>
                      <dd class="col-sm-8">${export_data.export_format}</dd>
                      
                      <dt class="col-sm-4">Status:</dt>
                      <dd class="col-sm-8"><span class="badge ${getBadgeClass(export_data.status)}">${export_data.status}</span></dd>
                      
                      <dt class="col-sm-4">Created:</dt>
                      <dd class="col-sm-8">${export_data.created_at}</dd>
                      
                      <dt class="col-sm-4">Created By:</dt>
                      <dd class="col-sm-8">${export_data.created_by}</dd>
                    </dl>
                  </div>
                  <div class="col-md-6">
                    <dl class="row">
                      <dt class="col-sm-4">Started:</dt>
                      <dd class="col-sm-8">${export_data.started_at || '-'}</dd>
                      
                      <dt class="col-sm-4">Completed:</dt>
                      <dd class="col-sm-8">${export_data.completed_at || '-'}</dd>
                      
                      <dt class="col-sm-4">Layers:</dt>
                      <dd class="col-sm-8">${JSON.stringify(export_data.layers)}</dd>
                      
                      <dt class="col-sm-4">Error:</dt>
                      <dd class="col-sm-8">${export_data.error_message || '-'}</dd>
                    </dl>
                  </div>
                </div>
                
                <div class="mt-3">
                  <h6>Parameters:</h6>
                  <pre class="bg-light p-2 rounded"><code>${JSON.stringify(export_data.parameters, null, 2)}</code></pre>
                </div>
                
                ${export_data.area_of_interest ? `
                <div class="mt-3">
                  <h6>Area of Interest:</h6>
                  <pre class="bg-light p-2 rounded"><code>${JSON.stringify(export_data.area_of_interest, null, 2)}</code></pre>
                </div>
                ` : ''}
              `;
              
              // If export is completed, show download link
              if (export_data.status === 'COMPLETED' && export_data.result_url) {
                downloadLink.href = '/api/v1/gis-exports/' + exportId + '/download';
                downloadLink.classList.remove('d-none');
              }
            } else {
              detailsContainer.innerHTML = '<div class="alert alert-danger">Export not found</div>';
            }
          })
          .catch(error => {
            detailsContainer.innerHTML = '<div class="alert alert-danger">Error loading export details: ' + error.message + '</div>';
          });
      }
      
      function getBadgeClass(status) {
        switch(status) {
          case 'COMPLETED': return 'bg-success';
          case 'RUNNING': return 'bg-primary';
          case 'FAILED': return 'bg-danger';
          case 'CANCELED': return 'bg-warning';
          default: return 'bg-secondary';
        }
      }

      function cancelExport(exportId) {
        if (confirm('Are you sure you want to cancel this export?')) {
          fetch('/api/v1/gis-exports/' + exportId + '/cancel', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          })
          .then(response => {
            if (response.ok) {
              alert('Export canceled successfully');
              location.reload();
            } else {
              response.json().then(data => {
                alert('Error: ' + data.error);
              });
            }
          })
          .catch(error => {
            alert('Error: ' + error);
          });
        }
      }

      // Initialize when the document is loaded
      document.addEventListener('DOMContentLoaded', function() {
        feather.replace();
        
        // Set up county change handler to load layers
        const countySelect = document.getElementById('exportCounty');
        if (countySelect) {
          countySelect.addEventListener('change', function() {
            getAvailableLayers(this.value);
          });
          
          // Load layers for initial county
          if (countySelect.value) {
            getAvailableLayers(countySelect.value);
          }
        }
      });
    </script>
  {{/inline}}
{{/layout}}