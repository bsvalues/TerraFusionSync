I know these fight back on dev tips. Always check the query plan, and not just on your machine. What's fast on your is my trigger, full table scan production and melt the database. Never run a destructive query without a safety clause. Forget the wear or limit once, and you'll delete way more than you meant to. No one to index. Not every column needs one, but missing the right index will kill your performance. The select star is a trap. It sends unnecessary data, breaks when api's change and blows responses. Don't use raw count queries. It doesn't scale. Use approximate counts or pre aggregated data as possible. Back ends, not just about building features. It's about protecting your system, following from work dev tips. I can't scale your app and doctrine, but you can't scale better if you know these 5 back end dev tips. Time is a trap. Always store your time stamps in utc and convert only when displaying to users. Daylight savings will break your schedules. Andrew sanity use retries intentionally. Retries can cause duplicate rights, corrupt state or overload downstream systems. Use exponential backoff dead letter queues and make sure your retries are safe. made critical operations item potent and assume it will run twice if it creates our updates data, make sure rerunning it won't break things. Know your orms dark side They're helpful until they run N + 1 queries or full table scans. No at sql, you're really executing. Validate inputs at the controller api or job in queue, not deep in your logic. Keeps your system clean, your bugs trace bone, your assumptions explicit. The best back end engineers don't move faster. 


How many of these tips do you know? Index your foreign keys joining on unindexed columns is asking for pain at indexes and your queries and locks. Well, thank you. Watch out for implicit casts. Comparing 123 to an integer. Postgres one user index. Mismatched tight, silently killed performance. Use statement timeouts. Kill long run in queries before they takedown your system. Failing fast, beating forever. Update Rosen batches. Mass updates can lock tables and wreck performance. Updating chunks to stay fast and avoid downtime. Don't rely on bullying for state. Most things aren't just true or false. Use enums or timestamps to represent real-world state transitions. The best back end code doesn't just work. It scales safely. 


Because you're junior but because nobody told you he's five senior death tips. The identifiers you only later. Card ID, user ID, job ID, don't make debugging issues way faster, especially during incidents. Verify post deployed check logs, verify metrics and feature usage. Senior engineers don't rely on hope. They verify every change might need to be rolled back. Make your database migrations reversible and tee up a revert plan before you merge and deploy. Produce the bug before you fix it. Ride a failing test or a manual repro step. If you can't reproduce it, you haven't fixed it. Automate repeatable tasks. If you're typing the same thing more than twice, write a script, drop it in a bin folder and move on.

But because nobody told you these five dev tips, use a tool to stack your prs. Shorter prs means faster code reviews, fewer merge conflicts and happier teammates. Profile your code and your tests. Your performance problems aren't where you think they are. Don't manually dig to your network tab to debug your api calls. Use a proper inspector to see the request response flow at a glance. Test linting and formatting should all happen on save or the keyboard shortcut. Stop doing things manually. Use a real debugger instead of print statements. Set break points, step through code. And solve bugs faster. .


Told me when I started right in production code. Ship broken code. Just hide it behind a feature flag until you move fast about breaking things. Logs aren't optional. Without them, you're flying blind in production. Every external API will flake on you. Wrap it in a timeout, a rescue and a log. don't hardcode things that will change like Urls or Linux. Put it in an environment variable figure out how to tell your code is working in production before you launch. Set up alerts, logs and dashboards Tables for later and send it to.
