TerraFusion Platform - DevOps GuideThis document outlines the DevOps practices, tools, and strategies for the TerraFusion Platform.1. Core PhilosophyAutomation: Automate testing, builds, deployments, and infrastructure provisioning wherever possible.Infrastructure as Code (IaC): Manage infrastructure using version-controlled configuration files (Terraform planned for cloud).Continuous Integration/Continuous Deployment (CI/CD): Ensure every change is automatically tested and can be reliably deployed.Observability: Build comprehensive monitoring, logging, and tracing into the platform from the start.Security: Integrate security practices throughout the development lifecycle (DevSecOps).2. Key Technologies & ToolsVersion Control: Git (hosted on GitHub).CI/CD: GitHub Actions.Containerization: Docker (used for local development stack and planned for cloud deployments).Orchestration (Local Dev): Docker Compose.Orchestration (Cloud - Planned): Kubernetes (e.g., Azure Kubernetes Service - AKS).Database Schema Migrations: Alembic (for terrafusion_sync's PostgreSQL database).Testing Framework: Pytest.Observability:Metrics: Prometheus.Visualization: Grafana.Alternative/Primary for Constrained Environments (e.g., Benton County dev machine): Azure Application Insights (for logs, metrics, traces).Infrastructure as Code (Planned): Terraform.3. CI/CD Pipeline (GitHub Actions)Workflow File: .github/workflows/ci.ymlTriggers: On pushes to main/develop branches and on pull requests targeting these branches.Key Stages:Checkout Code: Fetches the latest code.Set up Python Environment: Configures the specified Python version.Install Dependencies: Installs Python packages from requirements.txt files for services and tests.Start Services (for Integration Tests):Spins up a PostgreSQL service container.Sets TEST_TERRAFUSION_OPERATIONAL_DB_URL to connect to this CI database.Apply Alembic Migrations:Runs alembic upgrade head (from terrafusion_sync/ working directory) against the CI test database to ensure the schema is up-to-date.Run Linters (Optional but Recommended): e.g., Flake8, Ruff.Run Unit Tests: Executes pytest tests/unit (or similar).Run Integration Tests: Executes pytest tests/integration (or pytest -m integration). This tests the interaction between components, including database operations.Build Docker Images (Optional): Builds Docker images for terrafusion_gateway and terrafusion_sync to verify Dockerfile integrity.Goal: Ensure every commit is automatically validated, providing rapid feedback and maintaining code quality.4. Database Schema Management (Alembic)Location: terrafusion_sync/alembic_migrations/ and terrafusion_sync/alembic.ini.Workflow for Schema Changes:Modify SQLAlchemy models in terrafusion_sync/core_models.py.From the terrafusion_sync/ directory, run:alembic revision -m "short_description_of_change" --autogenerate
Carefully review and edit the generated migration script in alembic_migrations/versions/. Ensure the down_revision is correct and the upgrade()/downgrade() functions accurately reflect the intended changes.Apply to local development database:alembic upgrade head
Commit the models and the new migration script.The CI pipeline will automatically apply migrations to its test database.For staging/production, migrations will be applied as part of the deployment process.5. Observability Strategyterrafusion_sync (FastAPI Service):Exposes Prometheus metrics at /metrics (job counters, durations, errors for each plugin).Instrumented using prometheus-client.For environments like the Benton County dev machine, this service will also be instrumented with OpenCensus Azure Exporters to send telemetry to Azure Application Insights.terrafusion_gateway (Flask Service):Exposes Prometheus metrics at /gateway-metrics (HTTP request counts, latencies, error rates).Instrumented using prometheus-client.Similarly, for constrained environments, will be instrumented for Azure Application Insights.Local Development Monitoring (If Docker is available):docker-compose.yml includes Prometheus and Grafana.Prometheus (infra/prometheus/prometheus.yml) scrapes both /metrics from terrafusion_sync and /gateway-metrics from terrafusion_gateway.Grafana dashboards visualize these metrics.Primary Monitoring for Benton County Dev Machine (Docker Constrained):Services run as direct Python processes.Telemetry (logs, metrics, traces) sent to Azure Application Insights.Dashboards and analysis performed within the Azure Portal.Staging/Production Monitoring (Planned):Cloud-native Prometheus/Grafana stack (e.g., managed Prometheus in Azure/AWS/GCP) or deeper integration with Azure Monitor/Application Insights.Centralized logging (e.g., Azure Log Analytics, ELK stack).Alerting configured for critical metrics and error conditions.6. Deployment Strategy (Conceptual - To Be Detailed for Cloud)Local Development: Direct Python execution or docker-compose.CI Environment: GitHub Actions runners.Staging/Production (Planned):Containerization: Docker images for terrafusion_gateway and terrafusion_sync.Orchestration: Kubernetes (e.g., Azure Kubernetes Service - AKS) is a likely target for scalability and management.Database: Managed PostgreSQL services (e.g., Azure Database for PostgreSQL).Deployment Process:CI pipeline builds and tests code, then builds Docker images and pushes to a container registry (e.g., Azure Container Registry - ACR).CD pipeline (e.g., GitHub Actions, Azure DevOps Pipelines, ArgoCD) deploys new image versions to Kubernetes.Alembic migrations applied as a pre-deployment step or via a Kubernetes Job.Configuration managed via Kubernetes ConfigMaps/Secrets, populated from environment-specific values (potentially via HashiCorp Vault or Azure Key Vault).7. Environment Configuration.env file at the project root for local development (loaded by python-dotenv).county_configs/ directory for county-specific configurations (mappings, RBAC users), managed by the SDK.For CI/Staging/Production, environment variables will be injected directly into the runtime environment or via the orchestration platform's secret management.This DevOps guide provides a framework. Specific implementation details will evolve as the project matures.