TerraFusion PlatformVision: To be the leading SaaS platform for county assessor offices, providing a modern, integrated, efficient, and accurate suite of tools for property valuation, assessment management, data synchronization, reporting, and analytics.OverviewThe TerraFusion Platform is designed to replace legacy CAMA (Computer-Assisted Mass Appraisal) systems with a modular, scalable, and observable cloud-native solution. It features a robust backend built with Python (FastAPI and Flask) and PostgreSQL, with a plugin-based architecture for core functionalities.Key Components:terrafusion_gateway (Flask): The public-facing API Gateway. It handles:Authentication and Authorization (RBAC).Request validation and routing.Proxying requests to the terrafusion_sync service.Exposes its own operational metrics.terrafusion_sync (FastAPI): The core backend engine. It provides:Data ingestion and synchronization pipelines from legacy systems (e.g., PACS, Tyler).A plugin architecture for SaaS modules:Valuation Plugin: Asynchronous property valuation jobs.Reporting Plugin: Asynchronous generation of standard and custom reports.Market Analysis Plugin: Asynchronous market trend analysis.GIS Export Plugin: Asynchronous export of data in GIS formats.(Planned) File Ingestion Plugin: Backend for manual file uploads and approvals.Interaction with the PostgreSQL operational database.Alembic for database schema migrations.Exposes detailed Prometheus metrics for all plugins and core operations.Databases:Operational OLTP: PostgreSQL (stores current property data, job statuses, etc.).(Planned) PostGIS, Analytics DB (ClickHouse/Redshift), Archive DB (S3/Parquet).Frontend Applications (terra_fusion_frontends/ - Planned):Web-based user interfaces for interacting with the platform's modules.SDK (sdk/):Command-line tools (new_county_setup.py) to bootstrap configurations for new counties.Observability:Prometheus metrics exposed by both backend services.Grafana dashboards for visualization.For environments with Docker restrictions (like the primary Benton County dev machine), Azure Application Insights is the recommended alternative for collecting and visualizing telemetry.CI/CD:GitHub Actions for automated testing (unit and integration tests using pytest) and Alembic migrations against a test database.Getting Started (Local Development)This setup assumes you are on a machine where you can run Python services directly. For environments with Docker restrictions, the Prometheus/Grafana stack might be replaced by pushing metrics to Azure Application Insights.PrerequisitesPython 3.9+PostgreSQL server (local installation or accessible instance)pip for installing Python packagesGit(Optional, for full local observability if Docker is available) Docker and Docker Compose(For Azure Observability) Azure CLI or PowerShell, and an Azure account with an Application Insights resource configured.Setup InstructionsClone the Repository:git clone <repository_url>
cd terrafusion_platform
Create and Activate a Python Virtual Environment:python -m venv .venv
source .venv/bin/activate  # Linux/macOS
# .venv\Scripts\activate    # Windows
Install Dependencies:Install common test dependencies:pip install pytest pytest-asyncio httpx alembic python-dotenv asyncpg greenlet prometheus-client
Install dependencies for terrafusion_sync:pip install -r terrafusion_sync/requirements.txt
Install dependencies for terrafusion_gateway:pip install -r terrafusion_gateway/requirements.txt
(For Azure Observability) Install OpenCensus Azure exporters:pip install opencensus-ext-azure
Configure Environment Variables:Copy .env.sample to .env at the project root: cp .env.sample .envEdit the .env file with your specific configurations:TERRAFUSION_OPERATIONAL_DB_URL: Connection string for your development PostgreSQL database (e.g., postgresql+asyncpg://user:password@localhost:5432/terrafusion_dev_db).TEST_TERRAFUSION_OPERATIONAL_DB_URL: Connection string for your separate test PostgreSQL database.FLASK_SECRET_KEY: A strong secret key for the Flask Gateway.TERRAFUSION_SYNC_SERVICE_URL: URL for the Gateway to reach the Sync service (e.g., http://localhost:8001/plugins/v1 if running terrafusion_sync locally on port 8001).(For Azure Observability) APPLICATIONINSIGHTS_CONNECTION_STRING: Your Application Insights connection string.Setup Databases:Ensure your PostgreSQL server is running.Create your development database (e.g., terrafusion_dev_db) and your test database (e.g., terrafusion_test_db) with the appropriate user and permissions.Run Database Migrations (Alembic):Navigate to the terrafusion_sync directory:cd terrafusion_sync
Apply migrations to your development database (Alembic uses TERRAFUSION_OPERATIONAL_DB_URL from .env):alembic upgrade head
The test database schema will be set up automatically by pytest fixtures (conftest.py) when tests are run.Running the Services Locally (Direct Python Execution)Start terrafusion_sync Service:Open a new terminal, activate your virtual environment, and navigate to terrafusion_platform/.Ensure TERRAFUSION_OPERATIONAL_DB_URL is correctly set in .env.Run:uvicorn terrafusion_sync.app:app --host 0.0.0.0 --port 8001 --reload
It should be accessible at http://localhost:8001. Check /sync-health and /metrics.Start terrafusion_gateway Service:Open another new terminal, activate your virtual environment, and navigate to terrafusion_platform/.Ensure FLASK_SECRET_KEY and TERRAFUSION_SYNC_SERVICE_URL are set in .env.Set FLASK_APP: export FLASK_APP=terrafusion_gateway.main:create_app (Linux/macOS) or set FLASK_APP=terrafusion_gateway.main:create_app (Windows cmd) or $env:FLASK_APP="terrafusion_gateway.main:create_app" (Windows PowerShell).Run:flask run --host=0.0.0.0 --port=5000 --debug
It should be accessible at http://localhost:5000. Check /gateway-health and /gateway-metrics.Running with Docker Compose (If Docker is Available)Refer to the docker-compose.yml file for service definitions.# Ensure .env file is configured, especially DB credentials for the Postgres service in Docker
docker-compose up --build -d
This will start PostgreSQL, terrafusion_sync, terrafusion_gateway, Prometheus, and Grafana.Prometheus: http://localhost:9090Grafana: http://localhost:3000Running TestsNavigate to the project root (terrafusion_platform/).Ensure TEST_TERRAFUSION_OPERATIONAL_DB_URL is set in your .env file and points to a separate test database.Run all tests:pytest
Run specific tests:pytest tests/integration/test_valuation_end_to_end.py
Project Structure(Refer to the "TerraFusion Platform - Project Structure Skeleton (Unified Backend Core)" or the more detailed structure in the Development Plan for an overview of directories and their purposes.)Contribution GuidelinesFollow existing coding patterns and styles.Write unit and integration tests for new features.Ensure all tests pass in CI before merging to develop or main.Update documentation (READMEs, API docs, user guides) as appropriate.Create Alembic migrations for any database schema changes in terrafusion_sync.