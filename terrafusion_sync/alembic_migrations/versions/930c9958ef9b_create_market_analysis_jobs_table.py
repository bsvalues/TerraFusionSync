"""create_market_analysis_jobs_table

Revision ID: 930c9958ef9b
Revises: 6326402750e5
Create Date: 2025-05-12 21:11:44.956206

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '930c9958ef9b'
down_revision: Union[str, None] = '6326402750e5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Create market_analysis_jobs table for Market Analysis plugin
    op.create_table(
        'market_analysis_jobs',
        sa.Column('job_id', sa.String(36), primary_key=True, nullable=False, comment="Unique ID for the market analysis job"),
        sa.Column('analysis_type', sa.String(50), nullable=False, comment="Type of market analysis (e.g., trend_analysis, comparable_market_area)"),
        sa.Column('county_id', sa.String(50), nullable=False, comment="County ID for the analysis"),
        sa.Column('status', sa.String(20), nullable=False, server_default='PENDING', comment="e.g., PENDING, RUNNING, COMPLETED, FAILED"),
        sa.Column('message', sa.Text(), nullable=True, comment="Status message or error details"),
        sa.Column('parameters_json', sa.JSON(), nullable=True, comment="JSON object storing parameters for the analysis (e.g., date ranges, property types)"),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.Column('started_at', sa.DateTime(), nullable=True),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.Column('result_summary_json', sa.JSON(), nullable=True, comment="Summary of the analysis results"),
        sa.Column('result_data_location', sa.String(255), nullable=True, comment="Location/identifier for more detailed result data (e.g., S3 path, table name)"),
        sa.PrimaryKeyConstraint('job_id')
    )
    
    # Create indexes for the market_analysis_jobs table
    op.create_index(op.f('ix_market_analysis_jobs_analysis_type'), 'market_analysis_jobs', ['analysis_type'], unique=False)
    op.create_index(op.f('ix_market_analysis_jobs_county_id'), 'market_analysis_jobs', ['county_id'], unique=False)
    op.create_index(op.f('ix_market_analysis_jobs_status'), 'market_analysis_jobs', ['status'], unique=False)
    
    # ### commands auto generated by Alembic - we're skipping these operations as they may be unrelated
    # op.drop_table('user_onboarding')
    # op.drop_table('onboarding_event')
    # op.drop_table('sync_source_systems')
    # op.drop_index('ix_properties_operational_county_id', table_name='properties_operational')
    # op.drop_index('ix_properties_operational_parcel_number', table_name='properties_operational')
    # op.drop_table('properties_operational')
    # op.drop_index('ix_users_username', table_name='users')
    # op.drop_table('users')
    # op.drop_table('import_jobs')
    # op.drop_table('sync_pairs')
    # op.drop_table('audit_entries')
    # op.drop_table('onboarding_events')
    # op.drop_table('property_valuations')
    # op.drop_table('sync_operations')
    # op.drop_table('property_improvements')
    # op.drop_table('system_metrics')
    # op.drop_index('ix_report_job_county_id', table_name='report_job')
    # op.drop_index('ix_report_job_report_type', table_name='report_job')
    # op.drop_index('ix_report_job_status', table_name='report_job')
    # op.drop_table('report_job')
    op.add_column('property_operational', sa.Column('id', sa.Integer(), nullable=False))
    op.add_column('property_operational', sa.Column('property_class', sa.String(length=50), nullable=True))
    op.add_column('property_operational', sa.Column('lot_size_sqft', sa.Float(), nullable=True))
    op.add_column('property_operational', sa.Column('building_size_sqft', sa.Float(), nullable=True))
    op.add_column('property_operational', sa.Column('stories', sa.Float(), nullable=True))
    op.add_column('property_operational', sa.Column('market_value', sa.Float(), nullable=True))
    op.add_column('property_operational', sa.Column('land_value', sa.Float(), nullable=True))
    op.add_column('property_operational', sa.Column('improvement_value', sa.Float(), nullable=True))
    op.add_column('property_operational', sa.Column('tax_year', sa.Integer(), nullable=True))
    op.add_column('property_operational', sa.Column('tax_status', sa.String(length=50), nullable=True))
    op.add_column('property_operational', sa.Column('is_historic', sa.Boolean(), nullable=False))
    op.add_column('property_operational', sa.Column('sync_status', sa.String(length=50), nullable=False))
    op.add_column('property_operational', sa.Column('sync_timestamp', sa.DateTime(), nullable=True))
    op.add_column('property_operational', sa.Column('last_modified_by', sa.String(length=100), nullable=True))
    op.add_column('property_operational', sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('property_operational', sa.Column('valuation_history', sa.JSON(), nullable=True))
    op.alter_column('property_operational', 'property_id',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=36),
               existing_nullable=False)
    op.alter_column('property_operational', 'county_id',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('property_operational', 'property_type',
               existing_type=sa.VARCHAR(length=30),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('property_operational', 'address_street',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               nullable=True)
    op.alter_column('property_operational', 'address_city',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               nullable=True)
    op.alter_column('property_operational', 'address_state',
               existing_type=sa.VARCHAR(length=2),
               type_=sa.String(length=50),
               nullable=True)
    op.alter_column('property_operational', 'address_zip',
               existing_type=sa.VARCHAR(length=10),
               type_=sa.String(length=20),
               nullable=True)
    op.alter_column('property_operational', 'last_sale_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('property_operational', 'tax_district',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('property_operational', 'is_exempt',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('property_operational', 'exemption_type',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=True)
    op.alter_column('property_operational', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('property_operational', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_property_operational_assessed_value'), 'property_operational', ['assessed_value'], unique=False)
    op.create_index(op.f('ix_property_operational_assessment_year'), 'property_operational', ['assessment_year'], unique=False)
    op.create_index(op.f('ix_property_operational_market_value'), 'property_operational', ['market_value'], unique=False)
    op.create_index(op.f('ix_property_operational_property_class'), 'property_operational', ['property_class'], unique=False)
    op.create_index(op.f('ix_property_operational_property_id'), 'property_operational', ['property_id'], unique=True)
    op.create_index(op.f('ix_property_operational_property_type'), 'property_operational', ['property_type'], unique=False)
    op.drop_column('property_operational', 'data_source')
    op.drop_column('property_operational', 'building_area_sqft')
    op.drop_column('property_operational', 'last_sync_id')
    op.drop_column('property_operational', 'owner_type')
    op.drop_column('property_operational', 'current_market_value')
    op.drop_column('property_operational', 'is_historical')
    op.drop_column('property_operational', 'millage_rate')
    op.drop_column('property_operational', 'land_area_sqft')
    op.drop_column('property_operational', 'owner_name')
    op.drop_column('property_operational', 'extended_attributes')
    op.alter_column('report_jobs', 'report_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Type of report being generated (e.g., sales_ratio_study, assessment_roll)',
               existing_nullable=False)
    op.alter_column('report_jobs', 'county_id',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               comment=None,
               existing_comment='County ID for which the report is generated',
               existing_nullable=False)
    op.alter_column('report_jobs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               comment=None,
               existing_comment='Timestamp when the job was created')
    op.alter_column('report_jobs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               comment=None,
               existing_comment='Timestamp of the last status update')
    op.alter_column('report_jobs', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when report generation started',
               existing_nullable=True)
    op.alter_column('report_jobs', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               comment=None,
               existing_comment='Timestamp when report generation completed or failed',
               existing_nullable=True)
    op.alter_column('report_jobs', 'status',
               existing_type=sa.VARCHAR(length=30),
               type_=sa.String(length=20),
               comment=None,
               existing_comment='Report job status: PENDING, RUNNING, COMPLETED, FAILED',
               existing_nullable=False)
    op.alter_column('report_jobs', 'parameters_json',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='JSON object storing the parameters used for report generation',
               existing_nullable=True)
    op.alter_column('report_jobs', 'result_location',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Location/identifier of the generated report (e.g., S3 path, URL)',
               existing_nullable=True)
    op.alter_column('report_jobs', 'result_metadata_json',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='Optional metadata about the report result (e.g., file size, page count)',
               existing_nullable=True)
    op.alter_column('report_jobs', 'message',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Status message or error details',
               existing_nullable=True)
    op.drop_index('ix_report_jobs_county_id', table_name='report_jobs')
    op.drop_index('ix_report_jobs_report_type', table_name='report_jobs')
    op.drop_index('ix_report_jobs_status', table_name='report_jobs')
    # ### end Alembic commands ###


def downgrade() -> None:
    # Drop market_analysis_jobs table
    op.drop_index(op.f('ix_market_analysis_jobs_status'), table_name='market_analysis_jobs')
    op.drop_index(op.f('ix_market_analysis_jobs_county_id'), table_name='market_analysis_jobs')
    op.drop_index(op.f('ix_market_analysis_jobs_analysis_type'), table_name='market_analysis_jobs')
    op.drop_table('market_analysis_jobs')
    
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_index('ix_report_jobs_status', 'report_jobs', ['status'], unique=False)
    # op.create_index('ix_report_jobs_report_type', 'report_jobs', ['report_type'], unique=False)
    # op.create_index('ix_report_jobs_county_id', 'report_jobs', ['county_id'], unique=False)
    op.alter_column('report_jobs', 'message',
               existing_type=sa.TEXT(),
               comment='Status message or error details',
               existing_nullable=True)
    op.alter_column('report_jobs', 'result_metadata_json',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='Optional metadata about the report result (e.g., file size, page count)',
               existing_nullable=True)
    op.alter_column('report_jobs', 'result_location',
               existing_type=sa.VARCHAR(length=255),
               comment='Location/identifier of the generated report (e.g., S3 path, URL)',
               existing_nullable=True)
    op.alter_column('report_jobs', 'parameters_json',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='JSON object storing the parameters used for report generation',
               existing_nullable=True)
    op.alter_column('report_jobs', 'status',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=30),
               comment='Report job status: PENDING, RUNNING, COMPLETED, FAILED',
               existing_nullable=False)
    op.alter_column('report_jobs', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Timestamp when report generation completed or failed',
               existing_nullable=True)
    op.alter_column('report_jobs', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               comment='Timestamp when report generation started',
               existing_nullable=True)
    op.alter_column('report_jobs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               comment='Timestamp of the last status update')
    op.alter_column('report_jobs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               comment='Timestamp when the job was created')
    op.alter_column('report_jobs', 'county_id',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               comment='County ID for which the report is generated',
               existing_nullable=False)
    op.alter_column('report_jobs', 'report_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Type of report being generated (e.g., sales_ratio_study, assessment_roll)',
               existing_nullable=False)
    op.add_column('property_operational', sa.Column('extended_attributes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('property_operational', sa.Column('owner_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('property_operational', sa.Column('land_area_sqft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('property_operational', sa.Column('millage_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('property_operational', sa.Column('is_historical', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('property_operational', sa.Column('current_market_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('property_operational', sa.Column('owner_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True))
    op.add_column('property_operational', sa.Column('last_sync_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('property_operational', sa.Column('building_area_sqft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('property_operational', sa.Column('data_source', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_property_operational_property_type'), table_name='property_operational')
    op.drop_index(op.f('ix_property_operational_property_id'), table_name='property_operational')
    op.drop_index(op.f('ix_property_operational_property_class'), table_name='property_operational')
    op.drop_index(op.f('ix_property_operational_market_value'), table_name='property_operational')
    op.drop_index(op.f('ix_property_operational_assessment_year'), table_name='property_operational')
    op.drop_index(op.f('ix_property_operational_assessed_value'), table_name='property_operational')
    op.alter_column('property_operational', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('property_operational', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('property_operational', 'exemption_type',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('property_operational', 'is_exempt',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('property_operational', 'tax_district',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('property_operational', 'last_sale_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('property_operational', 'address_zip',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=10),
               nullable=False)
    op.alter_column('property_operational', 'address_state',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=2),
               nullable=False)
    op.alter_column('property_operational', 'address_city',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('property_operational', 'address_street',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('property_operational', 'property_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=30),
               existing_nullable=False)
    op.alter_column('property_operational', 'county_id',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.alter_column('property_operational', 'property_id',
               existing_type=sa.String(length=36),
               type_=sa.VARCHAR(length=50),
               existing_nullable=False)
    op.drop_column('property_operational', 'valuation_history')
    op.drop_column('property_operational', 'attributes')
    op.drop_column('property_operational', 'last_modified_by')
    op.drop_column('property_operational', 'sync_timestamp')
    op.drop_column('property_operational', 'sync_status')
    op.drop_column('property_operational', 'is_historic')
    op.drop_column('property_operational', 'tax_status')
    op.drop_column('property_operational', 'tax_year')
    op.drop_column('property_operational', 'improvement_value')
    op.drop_column('property_operational', 'land_value')
    op.drop_column('property_operational', 'market_value')
    op.drop_column('property_operational', 'stories')
    op.drop_column('property_operational', 'building_size_sqft')
    op.drop_column('property_operational', 'lot_size_sqft')
    op.drop_column('property_operational', 'property_class')
    op.drop_column('property_operational', 'id')
    op.create_table('report_job',
    sa.Column('report_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('report_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='Type of report being generated (e.g., sales_ratio_study, assessment_roll)'),
    sa.Column('county_id', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='County ID for which the report is generated'),
    sa.Column('status', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='Report job status: PENDING, RUNNING, COMPLETED, FAILED'),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True, comment='Status message or error details'),
    sa.Column('parameters_json', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='JSON object storing the parameters used for report generation'),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Timestamp when the job was created'),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Timestamp of the last status update'),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Timestamp when report generation started'),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Timestamp when report generation completed or failed'),
    sa.Column('result_location', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Location/identifier of the generated report (e.g., S3 path, URL)'),
    sa.Column('result_metadata_json', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Optional metadata about the report result (e.g., file size, page count)'),
    sa.PrimaryKeyConstraint('report_id', name='report_job_pkey')
    )
    op.create_index('ix_report_job_status', 'report_job', ['status'], unique=False)
    op.create_index('ix_report_job_report_type', 'report_job', ['report_type'], unique=False)
    op.create_index('ix_report_job_county_id', 'report_job', ['county_id'], unique=False)
    op.create_table('system_metrics',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('cpu_usage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('memory_usage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('disk_usage', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('api_requests', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_syncs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_users', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('syncservice_health', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('api_gateway_health', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('database_health', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('average_response_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('error_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('raw_metrics', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='system_metrics_pkey')
    )
    op.create_table('property_improvements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('property_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('improvement_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('year_completed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('area_added_sqft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('value_added', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('permit_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('permit_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('permit_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties_operational.property_id'], name='property_improvements_property_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='property_improvements_pkey')
    )
    op.create_table('sync_operations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sync_pair_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('items_processed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('items_succeeded', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('items_failed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('log', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('result_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('initiated_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['initiated_by_id'], ['users.id'], name='sync_operations_initiated_by_id_fkey'),
    sa.ForeignKeyConstraint(['sync_pair_id'], ['sync_pairs.id'], name='sync_operations_sync_pair_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sync_operations_pkey')
    )
    op.create_table('property_valuations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('property_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('valuation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('valuation_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('valuation_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('valuation_type', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('valuation_year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('margin_of_error', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('comparables_used', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('adjustments', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_final', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('sync_operation_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['property_id'], ['properties_operational.property_id'], name='property_valuations_property_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='property_valuations_pkey')
    )
    op.create_table('onboarding_events',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('step_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='onboarding_events_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='onboarding_events_pkey')
    )
    op.create_table('audit_entries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('resource_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('operation_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('previous_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('new_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('additional_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('correlation_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='audit_entries_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='audit_entries_pkey')
    )
    op.create_table('sync_pairs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('source_config', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('target_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('target_config', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sync_frequency', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('sync_schedule', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='sync_pairs_created_by_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sync_pairs_pkey')
    )
    op.create_table('import_jobs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('source_system_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('job_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('total_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('processed_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('successful_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('failed_records', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('estimated_completion_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('job_parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_log', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['source_system_id'], ['sync_source_systems.id'], name='import_jobs_source_system_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='import_jobs_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=False),
    sa.Column('password_hash', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('login_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_ldap_user', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=True)
    op.create_table('properties_operational',
    sa.Column('property_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('county_id', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('parcel_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('address_street', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('address_city', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('address_state', sa.VARCHAR(length=2), autoincrement=False, nullable=False),
    sa.Column('address_zip', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('property_type', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('land_area_sqft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('building_area_sqft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('year_built', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bedrooms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bathrooms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('last_sale_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_sale_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('current_market_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('assessed_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('assessment_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tax_district', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('millage_rate', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tax_amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('owner_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('owner_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('legal_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_exempt', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('exemption_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_historical', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_sync_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('data_source', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('extended_attributes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('property_id', name='properties_operational_pkey')
    )
    op.create_index('ix_properties_operational_parcel_number', 'properties_operational', ['parcel_number'], unique=False)
    op.create_index('ix_properties_operational_county_id', 'properties_operational', ['county_id'], unique=False)
    op.create_table('sync_source_systems',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('system_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('county_id', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('connection_type', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('connection_config', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('auth_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('auth_config', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('schema_mapping', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_successful_sync', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sync_source_systems_pkey')
    )
    op.create_table('onboarding_event',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_onboarding_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('step_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('event_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_onboarding_id'], ['user_onboarding.id'], name='onboarding_event_user_onboarding_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='onboarding_event_pkey')
    )
    op.create_table('user_onboarding',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('current_step', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('progress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tutorial_complete', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_activity', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completion_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('dismissed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_onboarding_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_onboarding_pkey'),
    sa.UniqueConstraint('user_id', name='user_onboarding_user_id_key')
    )
    # ### end Alembic commands ###