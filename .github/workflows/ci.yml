name: TerraFusion Platform CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      # Test PostgreSQL database service
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: terrafusion_test
        ports:
          - 5432:5432
        # Healthcheck to wait for postgres to start
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      # Use GitHub Actions service for test database
      TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/terrafusion_test
      # For SQLAlchemy test debugging if needed
      SQLALCHEMY_TEST_ECHO: "False"
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov httpx
        pip install -r requirements.txt
    
    - name: Run unit tests
      run: |
        pytest terrafusion_platform/tests/unit -v
    
    - name: Apply Alembic migrations
      run: |
        cd terrafusion_sync
        python -c "
import os
import sys
from pathlib import Path
from alembic.config import Config
from alembic import command

# Path setup
CURRENT_DIR = Path(os.getcwd())
CONFIG_PATH = CURRENT_DIR / 'alembic.ini'

# Configure Alembic
alembic_cfg = Config(CONFIG_PATH)
alembic_cfg.set_main_option('sqlalchemy.url', os.environ['TEST_DATABASE_URL'])

# Apply migrations
command.upgrade(alembic_cfg, 'head')
print('Alembic migrations applied successfully')
        "
    
    - name: Run integration tests
      run: |
        pytest terrafusion_platform/tests/integration -v
    
    - name: Run Reporting Plugin Integration Tests
      run: |
        echo "Running Reporting Plugin Integration Tests..."
        # Run the reporting plugin tests with verbose output and showing print statements
        pytest tests/plugins/test_reporting.py -v -s -m "integration"
        
        # Also run the standalone stale reports test
        python test_stale_reports.py
        
        # Verify reporting metrics registration
        python test_reporting_metrics.py
      env:
        # Ensure all necessary environment variables for tests are available
        TEST_TERRAFUSION_OPERATIONAL_DB_URL: ${{ env.TEST_DATABASE_URL }}
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        LOG_LEVEL: DEBUG # More verbose logging for CI tests can be helpful
        
    - name: Run GIS Export Plugin Integration Tests
      run: |
        echo "Running GIS Export Plugin Integration Tests..."
        # Run the GIS export plugin tests with verbose output
        pytest tests/plugins/test_gis_export.py -v -s -m "integration"
        
        # Verify GIS export isolated metrics
        python test_gis_export_metrics.py
      env:
        TEST_TERRAFUSION_OPERATIONAL_DB_URL: ${{ env.TEST_DATABASE_URL }}
        DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        LOG_LEVEL: DEBUG
    
    - name: Generate coverage report
      run: |
        pytest --cov=terrafusion_sync --cov=terrafusion_platform --cov-report=xml terrafusion_platform/tests
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false